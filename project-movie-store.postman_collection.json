{
	"info": {
		"_postman_id": "1ccfcf62-6ce3-462e-9532-f3bcfc2f672b",
		"name": "project-movie-store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34607912"
	},
	"item": [
		{
			"name": "create and remove a movie",
			"item": [
				{
					"name": "create movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const requestData = JSON.parse(pm.request.body.raw);",
									"",
									"pm.environment.set(\"id\", responseData.id);",
									"pm.environment.set(\"title\", requestData.title);",
									"pm.environment.set(\"productionDate\", requestData.productionDate);",
									"pm.environment.set(\"producer\", requestData.producer);",
									"pm.environment.set(\"rating\", requestData.rating);",
									"",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"pm.test(\"Response has the required fields: id, title, productionDate, producer and rating and their values are the same as in req.body\", function () {",
									"       ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData).to.have.property(\"title\", requestData.title);",
									"    pm.expect(responseData).to.have.property(\"productionDate\", requestData.productionDate);",
									"    pm.expect(responseData).to.have.property(\"producer\", requestData.producer);",
									"    pm.expect(responseData).to.have.property(\"rating\", requestData.rating);",
									"});",
									"pm.test(\"Title is not an empty string\", function () {",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"pm.test(\"Producer is not an empty string\", function () {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.producer).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Producer should not be empty\");",
									"});",
									"",
									"pm.test(\"productionDate has a valid date format\", function () {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.productionDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"pm.test(\"Rating has value\", function () {",
									"    pm.expect(responseData.rating).to.not.be.null;",
									"});",
									"",
									"// Save the ID into an environment variable",
									"    const movieId = pm.response.json().id;",
									"    pm.environment.set(\"movieId\", movieId);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Sample First\",\r\n  \"productionDate\": \"2000-01-01\",\r\n  \"producer\": \"Sample ltd\",\r\n  \"rating\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}",
							"host": [
								"{{baseURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is within the acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response is an object with id, title, productionDate, producer and rating\", function (){",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id', pm.environment.get('id'));",
									"  pm.expect(responseData).to.have.property('title', pm.environment.get('title'));",
									"  pm.expect(responseData).to.have.property('productionDate', pm.environment.get('productionDate'));",
									"  pm.expect(responseData).to.have.property('producer', pm.environment.get('producer'));",
									"  pm.expect(responseData).to.have.property('rating', pm.environment.get('rating'));",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{movieId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test to check that the response body is an array and not empty\r",
									"pm.test(\"Response body is an array and not empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').to.have.lengthOf.at.least(1, \"Array should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"requestData object is the created movie\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach((movie) => {\r",
									"        pm.expect(movie).to.have.property('id', pm.environment.get('id'));\r",
									"        pm.expect(movie).to.have.property('title', pm.environment.get('title'));\r",
									"        pm.expect(movie).to.have.property('productionDate', pm.environment.get('productionDate'));\r",
									"        pm.expect(movie).to.have.property('producer', pm.environment.get('producer'));\r",
									"        pm.expect(movie).to.have.property('rating', pm.environment.get('rating'));\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}",
							"host": [
								"{{baseURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.expect(pm.response.to.have.status(204));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is empty after successful deletion\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{movieId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get movie by id after deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Movie not found error 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{movieId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all movies after deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Verify that response body has not deleted movie\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    responseData.forEach((movie) => {",
									"    pm.expect(movie.id).to.not.equal(pm.environment.get('id'));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}",
							"host": [
								"{{baseURL}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get movie and update rating",
			"item": [
				{
					"name": "create movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"const requestData = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.environment.set(\"id\", responseData.id);\r",
									"pm.environment.set(\"title\", requestData.title);\r",
									"pm.environment.set(\"productionDate\", requestData.productionDate);\r",
									"pm.environment.set(\"producer\", requestData.producer);\r",
									"pm.environment.set(\"rating\", requestData.rating);\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields: id, title, productionDate, producer and rating and their values are the same as in req.body\", function () {\r",
									"       \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData).to.have.property(\"title\", requestData.title);\r",
									"    pm.expect(responseData).to.have.property(\"productionDate\", requestData.productionDate);\r",
									"    pm.expect(responseData).to.have.property(\"producer\", requestData.producer);\r",
									"    pm.expect(responseData).to.have.property(\"rating\", requestData.rating);\r",
									"});\r",
									"pm.test(\"Title is not an empty string\", function () {\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Producer is not an empty string\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.producer).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Producer should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"productionDate is a valid date format\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.productionDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Rating is not an empty value\", function () {\r",
									"    pm.expect(responseData.rating).to.not.be.null;\r",
									"});\r",
									"\r",
									"// Save the ID into an environment variable\r",
									"    const movieId = pm.response.json().id;\r",
									"    pm.environment.set(\"movieId\", movieId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Sample Two\",\r\n  \"productionDate\": \"2002-02-02\",\r\n  \"producer\": \"Sample Second ltd\",\r\n  \"rating\": \"5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}",
							"host": [
								"{{baseURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within the acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with id, title, productionDate, producer and rating\", function (){\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('id', pm.environment.get('id'));\r",
									"  pm.expect(responseData).to.have.property('title', pm.environment.get('title'));\r",
									"  pm.expect(responseData).to.have.property('productionDate', pm.environment.get('productionDate'));\r",
									"  pm.expect(responseData).to.have.property('producer', pm.environment.get('producer'));\r",
									"  pm.expect(responseData).to.have.property('rating', pm.environment.get('rating'));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{movieId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update rating by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that the response body contains the updated movie rating\", function () {\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"  \r",
									"pm.environment.set(\"rating\", responseData.rating);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Sample Two\",\r\n  \"productionDate\": \"2002-02-02\",\r\n  \"producer\": \"Sample Second ltd\",\r\n  \"rating\": \"7\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{movieId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get movie by id after editing  rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"pm.test(\"Movie rating was successfuly updated\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData).to.have.property('rating', pm.environment.get('rating'));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{movieId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test to check that the response body is an array and not empty\r",
									"pm.test(\"Response body is an array and not empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').to.have.lengthOf.at.least(1, \"Array should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"The first requestData object is the created movie\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach((movie) => {\r",
									"        pm.expect(movie).to.have.property('id', pm.environment.get('id'));\r",
									"        pm.expect(movie).to.have.property('title', pm.environment.get('title'));\r",
									"        pm.expect(movie).to.have.property('productionDate', pm.environment.get('productionDate'));\r",
									"        pm.expect(movie).to.have.property('producer', pm.environment.get('producer'));\r",
									"        pm.expect(movie).to.have.property('rating', pm.environment.get('rating'));\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}",
							"host": [
								"{{baseURL}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}